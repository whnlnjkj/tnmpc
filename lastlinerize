%%
%% ss模型
% n11=[0.0002695 5.649e-07];
% d11=[1 0.002342 1.344e-06];
% n12=[0.0192 6.3e-05];
% d12=[1 0.003007 1.947e-06];
% n21=[-0.008886 0.009021];
% d21=[1 164.2 0.1563]; 
% n22=[5.628e-06 1.925e-09];
% d22=[1 0.002879 1.549e-06];
n11=[0.000287761690461384,1.32881871732315e-06];
d11=[1,0.00876734652920954,1.45872026279684e-05];
n12=[0.0110199513602668,-5.87265803310626e-05];
d12=[1,0.0387915183965845,8.79779773366833e-05];
n21=[0.000200122416578485,5.50245337000411e-07];
d21=[1,0.00622539155711173,9.56095047863456e-06]; 
n22=-[4.34539550944633e-05,1.78370582083665e-07];
d22=[1,0.00763075672020132,1.12933362765550e-05];
%%
h=1; %sampling interval
Gs=tf({n11 n12;n21 n22},{d11 d12;d21 d22});
Gsmin=ss(Gs,'min');%%去除了pole的存在
%% 增量形式
% n11=2.4436;
% d11=[2.5833*10^8 1.4637*10^8 2.9061*10^7 2.4438*10^6 7.5588*10^4 562.387 1];
% n12=[3220 381.9530];
% d12=[30902 16023 270.12 160.5068 1];
% n21=[3.9551 1];
% d21=[2.5833*10^8 1.4637*10^8 2.9061*10^7 2.4438*10^6 7.5588*10^4 562.387 1];
% n22=[-2.3631 -0.1687];
% d22=[30902 16023 270.12 160.5068 1];
% Gs=tf({n11 n12;n21 n22},{d11 d12;d21 d22});
% Gsmin=ss(Gs,'min');
% Gsmin=Gs;
[Ac,Bc,Cc,Dc]=ssdata(Gsmin);
%[Ap,Bp,Cp,Dp]=c2dm(Ac,Bc,Cc,Dc,h,'zoh');
[Ap,Bp,Cp,Dp]=c2dm(Ac,Bc,Cc,Dc,h);
[m1,n1]=size(Cp);%m1为y的数目，n1为状态量的数目
[n1,n_in]=size(Bp);
a1=0.001;
a2=0.5;
N1=10;
N2=10;
a=[a1 a2];
N=[N1 N2];
Np=100;
%%%%%%%%%%%%%%%%
%增量形式
%%%%%%%%%%%%%%%%
A_e=eye(n1+m1,n1+m1);
A_e(1:n1,1:n1)=Ap;
A_e(n1+1:n1+m1,1:n1)=Cp*Ap;
B_e=zeros(n1+m1,n_in);
B_e(1:n1,:)=Bp;
B_e(n1+1:n1+m1,:)=Cp*Bp;
C_e=zeros(m1,n1+m1);
C_e(:,n1+1:n1+m1)=eye(m1,m1);
Q=C_e'*C_e;%权值
R=0.1*eye(n_in,n_in);%权值
%% 级数形式
[Omega,Psi]=dmpc(A_e,B_e,a,N,Np,Q,R);%lagd的系数矩阵
L_m=zeros(n_in,sum(N));
[A1,L0]=lagd(a(1),N(1));
L_m(1,1:N(1))=L0';
In_s=1;
for jj=2:n_in;
[Al,L0]=lagd(a(jj),N(jj));
In_s=N(jj-1)+In_s;
In_e=In_s+N(jj)-1;
L_m(jj,In_s:In_e)=L0';
end
K=L_m*(Omega\Psi);
Acl=A_e-B_e*K;
R=0.1*eye(n_in,n_in);
[X,Y,Z]=dlqr(A_e,B_e,Q,R);
% figure
% plot(Z,'ro')
% hold on
% plot(eig(Acl),'b*');
y=zeros(m1,1);
u=zeros(n_in,1);
% xm=zeros(n1,1);
xm=zeros(n1,1);
%% 设定值
N_sim=17500;
r1=0.001*ones(1,N_sim+10);%设定值1
r2=0*ones(1,N_sim+10);%设定值2
%% 仿真
% i=2500:1:7500;
% r1(1,i)=0.02;
% i=7501:1:12500;
% r1(1,i)=0.03;
% i=12501:1:17500;
% r1(1,i)=-0.4;
% %%
% i=2500:1:7500;
% r2(1,i)=0.002;
% i=7501:1:12500;
% r2(1,i)=0.003;
% i=12501:1:17500;
% r2(1,i)=0.04;
sp=[r1;r2];
[M,Lzerot]=Mdu(a,N,n_in,1);
[u1,y1,deltau1,k]=simuuc(xm,u,y,sp,Ap,Bp,Cp,N_sim,Omega,Psi,Lzerot);
y1=y1';
u1=u1';


%%%%%  Typical data entry required for a 
%%%%%  MIMO state space  example
%%%%%    x(k+1) = A x(k) + B u(k)
%%%%%    y(k) = C x(k) + D u(k) + dist     Note: Assumes D=0
%%%%%
%%%%%   Assumes J = sum (r-y)^2 +  (u(k+i-1)-uss) R (u(k+i-1)-uss)
%%%%%                uss the steady state input
%%%%%
%%%%%  Illustrates closed-loop simulations with constraint handling
%%%%%  
%%%%%
%%%%%   THIS IS A SCRIPT FILE. CREATES ITS OWN DATA AS REQUIRED
%%%%%   EDIT THIS FILE TO ENTER YOUR OWN MODELS, ETC.
%%  
%% Author: J.A. Rossiter  (email: J.A.Rossiter@shef.ac.uk)
% A=[0.997660069390659,-0.00137464535368624,0,0,0,0,0,0;0,0.999999328524377,0,0,0,0,0,0;0,0,-5.79171020678778e-06,-0.00190198660572698,0,0,0,0;0,0,0.00304220506354283,0.999054351157258,0,0,0,0;0,0,0,0,0.996996544945832,-0.000995366393133108,0,0;0,0,0,0,0.00195019078488952,0.999999027475197,0,0;0,0,0,0,0,0,0.997124367331215,-0.00158389448037025;0,0,0,0,0,0,0.000975157834620225,0.999999226242826];
% B=[0.0312134278089941,0;1.52468822983478e-05,0;0.000760551265885706,0;0.000378138532767006,0;0,0.249624420465858;0,0.000243896058999716;0,0.00195031566924045;0,9.52759642335042e-07];
% C=[0.00862400000000000,0.0185106432000000,0,0,0.0768000000000000,0.129024000000000,0,0;0,0,-0.0710880000000000,0.144336000000000,0,0,0.00288153600000000,0.00100925440000000];
% D=[0 0;0 0];
A=[0.997660154419746,-0.00137474020254799,0,0,0,0,0,0;0.000975419660589156,0.999999328478055,0,0,0,0,0,0;0,0,-5.79638966538279e-06,-0.00190300112114660,0,0,0,0;0,0,0.00304303835449965,0.999053848102967,0,0,0,0;0,0,0,0,0.996996193072193,-0.000995244577358207,0,0;0,0,0,0,0.00195019044087937,0.999999027594158,0,0;0,0,0,0,0,0,0.997123951868122,-0.00158373861151698;0,0,0,0,0,0,0.000975157631550120,0.999999226318917];
B=[0.0312134291388530,0;1.52468827314528e-05,0;0.000760759588624913,0;0.000378241567997199,0;0,0.249624376432559;0,0.000243896030316216;0,0.00195031526310024;0,9.52759510060447e-07];
C=[0.00862428880130957,0.0185092693060388,0,0,0.0768017443388588,0.129020418842792,0,0;0,0,-0.0710844906661314,0.144330374168038,0,0,0.00288128096127745,0.00100926321611346];
D=[0 0;0 0];
%%%% Constraints
umax=[20;20];
umin=-[20;20];
Dumax=[1;1];
% Dumin=-[0.001;0.001];
%%%% Tuning parameters
R=eye(2)*2;
ny=5;        %%%% prediction horizon
nu=2;        %%%% control horizon
x0=[-0.585542839188249;0.997319635814744;-4.25533513718326e-05;0.0223638728498064;6.12810110430584e-05;-0.0856434104316201;-0.0900725841405037;0.122811232849940]*0;   %%%% Initial state
%%
% for i=1000:1:7000
% ref(1,i) = 0.01;%%%% Set point
% ref(2,i) = 0.001; 
% end
% for i=7001:1:13000
% ref(1,i) = 0.02;%%%% Set point
% ref(2,i) = 0.002;  
% end
% for i=13001:1:19000
% ref(1,i) = 0.03;%%%% Set point
% ref(2,i) = 0.003; 
% end
% for i=19001:1:25000
% ref(1,i) = 0.04;%%%% Set point
% ref(2,i) = 0.004; 
% end
% for i=25001:1:31000
% ref(1,i) = 0.05;%%%% Set point
% ref(2,i) = 0.005; 
% end
% for i=31001:1:37000
% ref(1,i) = 0.06;%%%% Set point
% ref(2,i) = 0.006; 
% end
for i=1:1:5000
ref(1,i) = 0.1;%%%% Set point
ref(2,i) = 0; 
end
%%
dist = 0*[ones(2,5000)];   %%%% disturbance
noise = 0*[ones(2,5000)]; %%%% measurement noise
%%%%% Closed-loop simulation 
[x,y,u,r] = imgpc_simulate(A,B,C,D,R,ny,nu,umax,umin,Dumax,x0,ref,dist,noise);
u=u';
y=y';

%%% Simulation of independent model GPC with a state space model (Figure 1 on)
%%%
%%% Uses the cost function   J = sum (r-y)^2 + R(u-uss)^2
%%% (weights absolute inputs not increments)
%%%
%%  [x,y,u,r] = imgpc_simulate(A,B,C,D,R,ny,nu,umax,umin,Dumax,x0,ref,dist,noise);
%%
%%%     x(k+1) = A x(k) + B u(k)              x0 is the initial condition
%%%     y(k)   = C x(k) + D u(k) + dist       Note: Assumes D=0, dist unknown
%%%
%%  input constraint         umax, umin
%%  input rate constraint    Dumax
%%  reference trajectory     ref, r
%%  steady-state input       uss
%%  Output/input horizons    ny,nu
%%  Weighting matrix in J    R
%%  measurement noise        noise
%%  
%% Author: J.A. Rossiter  (email: J.A.Rossiter@shef.ac.uk)
 
 
function [x,y,u,r] = imgpc_simulate(A,B,C,D,R,ny,nu,umax,umin,Dumax,x0,ref,dist,noise);
sizey = size(C,1);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Find GPC law  and observor (using independent model approach)   
%%%%%  Control law is written as  a combination of feedback and
%%%%%  simulation of the independent model
%%%%%
%%%%%         u = -Kz + Pr (r - offset);     offset = yprocess-ymodel
%%%%%  
%%%%%        Indpendent model is 
%%%%%        z = Az + Bu;  y = Cz;      
%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
 
%%%  Predictions are yfut = P*x + H*ufut + L*offset
%%%  Steady state input is estimated as M*(r-offset)
%%%  Note: As using inputs (not increments) require all columns of H
[H,P,L,M] = imgpc_predmat(A,B,C,D,ny);
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%  Find control law minimising  J = sum yfut'yfut + ufut*R*ufut
%%%  Assume that u(k+nu+i) = u(k+nu-1) in predictions
%%%  The optimal cost is 
%%%     J = ufut'Sufut + ufut'X*[x;r-offset] + unconstrained optimal
%%%  The control law is
%%%     ufut = -K*x +Pr*(r-offset)
%%%
%%%  Predictions are yfut = P*x + H*ufut + L*offset
[S,X,K,Pr] = imgpc_costfunction(H,P,L,M,R,nu,sizey,ny);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%   Constraints are summarised as 
%%%%%   umin < ufut < umax
%%%%%   CC*ufut - dfixed -dxu u(k-1)<=0
[CC,dfixed,dxu] = imgpc_constraints(nu,umin,umax,Dumax);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%  SIMULATION
%%% initialise data
nx = size(A,1);nuu=size(B,2);
x=[x0,x0];xm=x;xp=x;
yp=C*xm;ym=yp;
u=zeros(sizey,2);r=yp*0;
 
runtime = size(ref,2)-1;
opt = optimset;
opt.Display='off'; %'notify';
opt.Diagnostics='off';
opt.LargeScale='off';
 
 
for i=2:runtime;
    
   r(:,i+1) = ref(:,i+1);
 
   %%%%% Update offset 
   offset(:,i) = yp(:,i) + noise(:,i)-ym(:,i);   %%% Noise effects measurement only
   
   %%%% Update control decisions using a quadratic program
   %ufut = -K*xm(:,i) +Pr*(r(:,i+1)-offset(:,i));   %%  (unconstrained)
   ufut = quadprog(S,X*[xm(:,i);r(:,i+1)-offset(:,i)],CC,dfixed+dxu*u(:,i-1),[],[],[],[],[],opt);
   u(:,i) = ufut(1:sizey);
   Du(:,i)=u(:,i)-u(:,i-1);
 
   %  Ensure the constraints satisfied by proposed control law   
   for j=1:sizey;
   if u(j,i)>u(j,i-1)+Dumax(j);u(j,i)=u(j,i-1)+Dumax(j);end
   if u(j,i)<u(j,i-1)-Dumax(j);u(j,i)=u(j,i-1)-Dumax(j);end
   if u(j,i)>umax(j); u(i)=umax(j);end
   if u(j,i)<umin(j); u(i)=umin(j);end
   end
   Du(:,i) = u(:,i)-u(:,i-1);
   %%% End of update to the control law
 
   %%%% Simulate model
      xm(:,i+1) = A*xm(:,i)+B*u(:,i);
      ym(:,i+1) = C*xm(:,i+1);
   %%%% Simulate process
      xp(:,i+1) = A*xp(:,i)+B*u(:,i);
      yp(:,i+1) = C*xp(:,i+1)+dist(:,i);
end
 
%%%%% Ensure data lengths are all compatible
u(:,i+1)=u(:,i);
Du(:,i+1)=Du(:,i)*0;
r(:,i+1) = ref(:,i+1);
noise = noise(:,1:i+1);
d = dist(:,1:i+1);
 
x=xp;y=yp;
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
 
%%%%%  Produce a neat plot
% time=0:size(u,2)-1;
% for i=1:size(B,2);
%     figure(i);clf reset
%     plotall(yp(i,:),r(i,:),u(i,:),Du(i,:),d(i,:),noise(i,:),umax(i),umin(i),Dumax(i),time,i);
% end
% 
% disp('**************************************************');
% disp(['***    There are ',num2str(size(B,2)),' figures    ***']);
% disp('**************************************************');
 
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Function to do plotting in the MIMO case and 
%%%%% allow a small boundary around each plot
% function plotall(y,r,u,Du,d,noise,umax,umin,Dumax,time,loop)
 
% uupper = [umax,umax]';
% ulower = [umin,umin]';
% Duupper = [Dumax,Dumax]';
% Dulower = -[Dumax,Dumax]';
% time2 = [0,time(end)];
% rangeu = (max(umax)-min(umin))/20;
% rangedu = max(Dumax)/20;
% rangey = (max(max(y))-min(min(y)))/20;
% ranged = (max(max([d,noise]))-min(min([d,noise])))/20; if ranged==0;ranged=1;end
% 
% subplot(221);plot(time,y','-',time,r','--');
% axis([time2,min(min(y))-rangey,max(max(y))+rangey]);
% xlabel(['IMGPC - Outputs and set-point in loop ',num2str(loop)]);
% subplot(222);plot(time,Du','-',time2,Duupper,'--',time2,Dulower,'--');
% axis([time2,min(-Dumax)-rangedu,max(Dumax)+rangedu]);
% xlabel(['IMGPC - Input increments in loop ',num2str(loop)]);
% subplot(223);plot(time,u','-',time2,uupper,'--',time2,ulower,'--');
% axis([time2,min(umin)-rangeu,max(umax)+rangeu]);
% xlabel(['IMGPC - Inputs in loop ',num2str(loop)]);
% subplot(224);plot(time,d','b',time,noise,'g');
% axis([time2,min(min([d,noise]))-ranged,max(max([d,noise]))+ranged]);
% xlabel(['IMGPC- Disturbance/noise in loop ',num2str(loop)]);
 

%%%%%   Constraints are summarised as 
%%%%%   umin < u < umax    and | Du | < Dumax
%%%%%   
%%%%%   or     CC*ufut -dfixed - dxu*u(k-1)<=0  
%%%%%                        [Note: absolute inputs not increments]
%%%%%
%%%%%     nu is the control horizon
%%%%%
%%%%%    [CC,dfixed,dxu] = imgpc_constraints(nu,umin,umax,Dumax)
%%  
%% Author: J.A. Rossiter  (email: J.A.Rossiter@shef.ac.uk)
 
function [CC,dfixed,dxu] = imgpc_constraints(nu,umin,umax,Dumax)
 
sizeu = length(umax);
 
%%%%% Absolute limits
CC=[eye(nu*sizeu);-eye(nu*sizeu)];
dfixed=[umax;-umin];
for k=2:nu;
    dfixed = [umax;dfixed;-umin];
end
 
%%%% rate limits
[Cd,Hd] = caha([eye(sizeu),-eye(sizeu)],sizeu,nu);
CCR=[Cd;-Cd];
dfixedr=[Dumax];
for k=2:2*nu;
    dfixedr = [dfixedr;Dumax];
end
dxu=[zeros(2*nu*sizeu,sizeu);-Hd;Hd];
 
%%% All limits
CC=[CC;CCR];
dfixed = [dfixed;dfixedr];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%   Find a predictive control law and optimal cost given predictions
%%%%   yfut = P*xfut+H*ufut+L*offset
%%%%   uss  = M(r-offset)
%%%%
%%%%   Uses the cost function   J = sum (r-y)^2 + R(u-uss)^2
%%%%     J = ufut'*S*ufut + 2 ufut'*X*[x;r-offset] + k
%%%%   
%%%%   Cost weights absolute inputs (not increments) so need assumption
%%%%             u(k+nu+i) = u(k+nu-1) in predictions
%%%%
%%%%   Control weighting          R
%%%%   Control/ouput horizon      nu, ny
%%%%   Output dimension           sizey
%%%%
%%%%   Control law is
%%%%         ufut = -K*x  + Pr*(r-offset)     (No advance knowledge is used)
%%%%
%%%%   [S,X,K,Pr] = imgpc_costfunction(H,P,L,M,R,nu,sizey,ny);
%%  
%% Author: J.A. Rossiter  (email: J.A.Rossiter@shef.ac.uk)
 
function [S,X,K,Pr,H] = imgpc_costfunction(H,P,L,M,R,nu,sizey,ny);
 
 
%% J = | Lr - P x- H ufut - L*offset |  + R |ufut-uss|
%% J = | Lr - P x- H ufut - L*offset |  + R |ufut - M*(r-offset)|
 
%%% Sum last columns of H
v=(nu-1)*sizey;
for k=1:sizey;
    HH(:,k) = sum(H(:,v+k:sizey:end),2);
end
H = [H(:,1:(nu-1)*sizey),HH];
 
%%% Form weighting matrix and uss matrix
MM=[];
for k=1:nu;
    v = (k-1)*sizey+1:k*sizey;
    RR(v,v)=R;
    MM=[MM;M];
end
 
 
%%%% Cost function
%% J = | L*r - P x- H ufut - L*offset |  + R |ufut - MM*(r-offset)|
%% J = ufut'*S*ufut + 2 ufut'*X*[x;r-offset] + k
%%   = ufut'(H'H+R)ufut   +  2ufut'* H'*P*x + 2ufut'*H'*L*(offset-r)
%%               - 2*ufut'R*MM*(r-offset) + k
 
S = H'*H+RR;
X1 = H'*P;
X2 = -H'*L-RR*MM;
X=[X1,X2];
 
%%%% Unconstrained control law
%%%%         ufut = -K*x  + Pr*(r-offset)     (No advance knowledge is used)
Mi=inv(S);
K = Mi*X1;
Pr = -Mi*X2;
 

%%%%  To form prediction matrices over horizon ny given
%%%%
%%%%   x(k+1) = Ax(k)+Bu(k);    y(k) = Cx(k) + D u(k);  Assumes D=0
%%%%  
%%%%   Use absolute inputs (not increments)
%%%%
%%%%   yfut = P*x + H*ufut + L*offset   [offset = y(process) - y(model)]
%%%%
%%%   Also estimate steady-state input as     uss = M(r-offset)
%%%
%%%%  [H,P,L,M] = imgpc_predmat(A,B,C,D,ny);
%%  
%% Author: J.A. Rossiter  (email: J.A.Rossiter@shef.ac.uk)
 
function [H,P,L,M] = imgpc_predmat(A,B,C,D,ny)
 
 
%%% Estimate uss as uss = M(r-offset)
Gss = C*inv(eye(size(A,2))-A)*B;
M=inv(Gss);
 
%%%% Initialise
Px=C*A;  Pu=C*B;  P=C;
nx=size(A,1);
nB=size(B,2);
nC = size(C,1);
L=[];
%%%% Use recursion to find predictions
for i=1:ny;
   
   Puterm = P*B;
   for j=i:ny;
         vrow=(j-1)*nC+1:j*nC;
         vcol=(j-i)*nB+1:(j-i+1)*nB;
         Pu(vrow,vcol)=Puterm;
   end
   P=P*A;
   vrow=(i-1)*nC+1:i*nC;
   Px(vrow,1:nx) = P;
   L=[L;eye(nC)];
end
    H=Pu;
    P=Px;
    

%% 全局变量
clear
% numA为状态量的个数；numB为控制量的个数；numC为被控量的个数
% A=[20,-0.00137464535368624,0,0,0,0,0,0;0.000975419619031066,0.999999328524377,0,0,0,0,0,0;0,0,-5.79171020678778e-06,-0.00190198660572698,0,0,0,0;0,0,0.00304220506354283,0.999054351157258,0,0,0,0;0,0,0,0,0.996996544945832,-0.000995366393133108,0,0;0,0,0,0,0.00195019078488952,0.999999027475197,0,0;0,0,0,0,0,0,0.997124367331215,-0.00158389448037025;0,0,0,0,0,0,0.000975157834620225,0.999999226242826];
% B=[0.0312134278089941,0;1.52468822983478e-05,0;0.000760551265885706,0;0.000378138532767006,0;0,0.249624420465858;0,0.000243896058999716;0,0.00195031566924045;0,9.52759642335042e-07];
% C=[0.008624,0.0185106432,0,0,0.0768,0.1290240,0,0;0,0,-0.071088,0.144336,0,0,0.002881536,0.00100925440000000];
A=[0.997660069390659,-0.00137464535368624,0,0,0,0,0,0;0,0.999999328524377,0,0,0,0,0,0;0,0,-5.79171020678778e-06,-0.00190198660572698,0,0,0,0;0,0,0.00304220506354283,0.999054351157258,0,0,0,0;0,0,0,0,0.996996544945832,-0.000995366393133108,0,0;0,0,0,0,0.00195019078488952,0.999999027475197,0,0;0,0,0,0,0,0,0.997124367331215,-0.00158389448037025;0,0,0,0,0,0,0.000975157834620225,0.999999226242826];
B=[0.0312134278089941,0;1.52468822983478e-05,0;0.000760551265885706,0;0.000378138532767006,0;0,0.249624420465858;0,0.000243896058999716;0,0.00195031566924045;0,9.52759642335042e-07];
C=[0.00862400000000000,0.0185106432000000,0,0,0.0768000000000000,0.129024000000000,0,0;0,0,-0.0710880000000000,0.144336000000000,0,0,0.00288153600000000,0.00100925440000000];
D=[0 0;0 0];
Np=20;
Nc=10;
numA=size(A,1);%x
numB=size(B,2);%u
numC=size(C,1);%y
% for i=1:1:numA
% tri_x(i,1)=0;%%tri_x(k),构造
% end
tri_x=[0;0;0;0;0;0;0;0];%trix(k)的初始值,由xb(k)-x(k-1)得到,由u,y确定
u0=[0;0];%u(k-1)的初始值
ref=[0.01;0];%%ref_y设定值
yc=[1;0.1];%%y(k)初始值
%% xx0
for i=1:1:numB*Nc %ca;ca+caa;ca+caa+caaa
    xxx0(i,1)=1;
end
%% Sx
Sxx=C*A;
Sx=Sxx;
for i=1:1:Np %ca;ca+caa;ca+caa+caaa
    Sxx=Sxx+Sxx*A;
    Sx((numC*i+1):numC*(i+1),1:numA)=Sxx;
end
Sx=Sx(1:numC*i,1:numA);
%% tau
for i=1:1:Np % (i(nc*nc);...)Np组
    tau(numC*(i-1)+1:numC*i,1:numC)=eye(numC);
end
%% Su
Suu=B;% 第一列（cb;cb+cab;cb+cab+caab;...）Np个c（b;b+ab;b+ab+aab;...）
Suuu=B;
for i=1:1:Np 
    Su((numC*(i-1)+1):numC*i,1:numB)=C*Suu; 
    Suu=B+A*Suu;
end
for i=1:1:Nc-1
    Su(numC*i+1:Np*numB,numB*i+1:numB*(i+1))=Su(1:Np*numB-numC*i,1:numB);
end
%% tau_y und tau_u
tau_u=eye(numB*Nc);
tau_y=eye(numB*Np);
%% H
% H=Su'*(tau_y)'*tau_y*Su+tau_u'*tau_u;
HH=Su'*(tau_y)'*tau_y*Su+tau_u'*tau_u;
% H=(H+H')/2;
%% Ep(k+1|k)
for i=1:1:Np
    R(numC*i-1:numC*i,1)=ref;%R(k+1)
end
Ep=R-Sx*tri_x-tau*yc;
%% G(k+1|k)
G=2*Su'*(tau_y')*tau_y*Ep;
%% 不等式约束(left)
L1=eye(numB*Nc);
L2=tril(ones(numB*Nc,numB*Nc),0);
L1=[-L1;L1];
L2=[-L2;L2];
L3=[-Su;Su];
%% 不等式约束(right)
% u增量约束
triumin=[-0.5;-0.6];%%u1、u2约增量束的最小值
triumax=[0.7;0.8];%%u1、u2增量约束的最大值
for i=1:1:Nc
    triuright(numB*i-1:numB*i,1)=-triumax;%u1约束的最小值
    triuright(numB*Nc+numB*i-1:numB*Nc+numB*i,1)=triumin;%u1约束的最小值
end
R1=triuright;
% u幅值约束
umin=[-1;-2];%%u1、u2约束的最小值
umax=[3;4];%%u1、u2约束的最大值
for i=1:1:Nc
    uright(numB*(i-1)+1:numB*i,1)=u0-umax;%u1约束的最小值
    uright(((numB*Nc+numB*(i-1)+1):(numB*Nc+numB*i)),1)=umin-u0;%u1约束的最小值
end
R2=uright(1:1:40,1);
% y约束
ymin1=[-1.1;-2.2];%%y1、y2约束的最小值
ymax1=[3.3;4.4];%%y1、y2约束的最大值
for i=1:1:Np
    ymax(numC*(i-1)+1:numC*i,1)=ymax1;
    ymin(numC*(i-1)+1:numC*i,1)=ymin1;
end
yright(1:numC*Np,1)=Sx*tri_x+tau*yc-ymax;%u1约束的最小值
yright(numC*Np+1:2*numC*Np,1)=-Sx*tri_x-tau*yc+ymin;%u1约束的最小值
R3=yright;
%% 数值求解优化问题
AA=-[L1;L2;L3];
bb=-[R1;R2;R3];
x=sdpvar(20,1);
diagnostics = optimize(AA*x<=bb,x);value(x)
% [X,FVAL,EXITFLAG,OUTPUT] = fmincon(optkw,xxx0,AA,bb,[],[],[],[],[],options);
%% receding
% tri_x=[0;0];%trix(k)的初始值,由xb(k)-x(k-1)得到
% u0=[0;0];%u(k-1)的初始值
% ref=[1;1];%%ref_y设定值
% yc=[1;1];%%y(k-1)初始值
for t=1:1:2000;
yyc=yc;%保存y(k)
uu0=u0;%保存u(k-1)
y(t,1)=yc(1,1);%%%绝对量
y(t,2)=yc(2,1);%%%绝对量
u1=ans(1,1);
u2=ans(2,1);
triu=[u1;u2];%triu(k),由f求得
u0=triu+u0;%u(k)
u(t,1)=u0(1,1);%%%绝对量
u(t,2)=u0(2,1);%%%绝对量
tri_x=A*tri_x+B*triu;%trix(k+1),该方程可由测量量替换，右侧的tri_x隐含了x(k)
yc=C*tri_x+yc;%y(k+1)
Ep=R-Sx*tri_x-tau*yc;
G=2*Su'*(tau_y')*tau_y*Ep;
L1=eye(numB*Nc);
L2=tril(ones(numB*Nc,numB*Nc),0);
L1=[-L1;L1];
L2=[-L2;L2];
L3=[-Su;Su];
umin=[-1.1;-1];%%u1、u2约束的最小值
umax=[-0.6;0.6];%%u1、u2约束的最大值
for i=1:1:Nc
    uright(numB*(i-1)+1:numB*i,1)=u0-umax;%u1约束的最小值
    uright(numB*Nc+numB*i-1:numB*Nc+numB*i,1)=umin-u0;%u1约束的最小值
end
R2=uright(1:1:40,1);
% y约束
ymin1=[-10;-10];%%y1、y2约束的最小值
ymax1=[10;10];%%y1、y2约束的最大值
for i=1:1:Np
    ymax(numC*(i-1)+1:numC*i,1)=ymax1;
    ymin(numC*(i-1)+1:numC*i,1)=ymin1;
end
yright(1:numC*Np,1)=Sx*tri_x+tau*yc-ymax;%u1约束的最小值
yright(numC*Np+1:2*numC*Np,1)=-Sx*tri_x-tau*yc+ymin;%u1约束的最小值
R3=yright;
AA=-[L1;L2;L3];
bb=-[R1;R2;R3];
x = sdpvar(20,1);
diagnostics = optimize(AA*x<=bb,x);value(x)
end
